
laba3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000017a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001ce  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001ce  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000200  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000060  00000000  00000000  0000023c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000bd0  00000000  00000000  0000029c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007b4  00000000  00000000  00000e6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000044e  00000000  00000000  00001620  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000dc  00000000  00000000  00001a70  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003a6  00000000  00000000  00001b4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000497  00000000  00000000  00001ef2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  00002389  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e7       	ldi	r30, 0x7A	; 122
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 a9 00 	call	0x152	; 0x152 <main>
  7a:	0c 94 bb 00 	jmp	0x176	; 0x176 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <LCDWriteByte>:
	_delay_ms(100);
}

void LCDWriteByte(_LCDRegister reg, uint8_t data)
{
	LCD_PORT&=LCD_MASK;
  82:	9b b3       	in	r25, 0x1b	; 27
  84:	90 7c       	andi	r25, 0xC0	; 192
  86:	9b bb       	out	0x1b, r25	; 27
	
	if(reg)LCD_PORT|=LCD_RS;
  88:	81 11       	cpse	r24, r1
  8a:	dc 9a       	sbi	0x1b, 4	; 27
	
	LCD_PORT|=data>>4;
  8c:	8b b3       	in	r24, 0x1b	; 27
  8e:	96 2f       	mov	r25, r22
  90:	92 95       	swap	r25
  92:	9f 70       	andi	r25, 0x0F	; 15
  94:	89 2b       	or	r24, r25
  96:	8b bb       	out	0x1b, r24	; 27
	LCD_PORT|=LCD_E;
  98:	dd 9a       	sbi	0x1b, 5	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9a:	8d e0       	ldi	r24, 0x0D	; 13
  9c:	8a 95       	dec	r24
  9e:	f1 f7       	brne	.-4      	; 0x9c <LCDWriteByte+0x1a>
  a0:	00 00       	nop
	_delay_us(40);
	LCD_PORT&=~LCD_E;
  a2:	dd 98       	cbi	0x1b, 5	; 27
  a4:	8d e0       	ldi	r24, 0x0D	; 13
  a6:	8a 95       	dec	r24
  a8:	f1 f7       	brne	.-4      	; 0xa6 <LCDWriteByte+0x24>
  aa:	00 00       	nop
	_delay_us(40);
	
	LCD_PORT&=0xf0;
  ac:	8b b3       	in	r24, 0x1b	; 27
  ae:	80 7f       	andi	r24, 0xF0	; 240
  b0:	8b bb       	out	0x1b, r24	; 27
	
	LCD_PORT|=data&0x0f;
  b2:	8b b3       	in	r24, 0x1b	; 27
  b4:	6f 70       	andi	r22, 0x0F	; 15
  b6:	68 2b       	or	r22, r24
  b8:	6b bb       	out	0x1b, r22	; 27
	LCD_PORT|=LCD_E;
  ba:	dd 9a       	sbi	0x1b, 5	; 27
  bc:	8d e0       	ldi	r24, 0x0D	; 13
  be:	8a 95       	dec	r24
  c0:	f1 f7       	brne	.-4      	; 0xbe <LCDWriteByte+0x3c>
  c2:	00 00       	nop
	_delay_us(40);
	LCD_PORT&=~LCD_E;
  c4:	dd 98       	cbi	0x1b, 5	; 27
  c6:	8d e0       	ldi	r24, 0x0D	; 13
  c8:	8a 95       	dec	r24
  ca:	f1 f7       	brne	.-4      	; 0xc8 <LCDWriteByte+0x46>
  cc:	00 00       	nop
  ce:	08 95       	ret

000000d0 <LCDInit>:
#define LCD_E (1<<5)
#define LCD_MASK 0xC0

void LCDInit()
{
	DDRA|=~LCD_MASK;
  d0:	8a b3       	in	r24, 0x1a	; 26
  d2:	8f 63       	ori	r24, 0x3F	; 63
  d4:	8a bb       	out	0x1a, r24	; 26
	LCDWriteByte(LCD_IR, 0x33);
  d6:	63 e3       	ldi	r22, 0x33	; 51
  d8:	80 e0       	ldi	r24, 0x00	; 0
  da:	0e 94 41 00 	call	0x82	; 0x82 <LCDWriteByte>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  de:	87 ea       	ldi	r24, 0xA7	; 167
  e0:	91 e6       	ldi	r25, 0x61	; 97
  e2:	01 97       	sbiw	r24, 0x01	; 1
  e4:	f1 f7       	brne	.-4      	; 0xe2 <LCDInit+0x12>
  e6:	00 c0       	rjmp	.+0      	; 0xe8 <LCDInit+0x18>
  e8:	00 00       	nop
	_delay_ms(100);
	LCDWriteByte(LCD_IR, 0x32);
  ea:	62 e3       	ldi	r22, 0x32	; 50
  ec:	80 e0       	ldi	r24, 0x00	; 0
  ee:	0e 94 41 00 	call	0x82	; 0x82 <LCDWriteByte>
  f2:	87 ea       	ldi	r24, 0xA7	; 167
  f4:	91 e6       	ldi	r25, 0x61	; 97
  f6:	01 97       	sbiw	r24, 0x01	; 1
  f8:	f1 f7       	brne	.-4      	; 0xf6 <LCDInit+0x26>
  fa:	00 c0       	rjmp	.+0      	; 0xfc <LCDInit+0x2c>
  fc:	00 00       	nop
	_delay_ms(100);
	LCDWriteByte(LCD_IR, 0x28);
  fe:	68 e2       	ldi	r22, 0x28	; 40
 100:	80 e0       	ldi	r24, 0x00	; 0
 102:	0e 94 41 00 	call	0x82	; 0x82 <LCDWriteByte>
 106:	87 ea       	ldi	r24, 0xA7	; 167
 108:	91 e6       	ldi	r25, 0x61	; 97
 10a:	01 97       	sbiw	r24, 0x01	; 1
 10c:	f1 f7       	brne	.-4      	; 0x10a <LCDInit+0x3a>
 10e:	00 c0       	rjmp	.+0      	; 0x110 <LCDInit+0x40>
 110:	00 00       	nop
	_delay_ms(100);
	LCDWriteByte(LCD_IR, 0x01);
 112:	61 e0       	ldi	r22, 0x01	; 1
 114:	80 e0       	ldi	r24, 0x00	; 0
 116:	0e 94 41 00 	call	0x82	; 0x82 <LCDWriteByte>
 11a:	87 ea       	ldi	r24, 0xA7	; 167
 11c:	91 e6       	ldi	r25, 0x61	; 97
 11e:	01 97       	sbiw	r24, 0x01	; 1
 120:	f1 f7       	brne	.-4      	; 0x11e <LCDInit+0x4e>
 122:	00 c0       	rjmp	.+0      	; 0x124 <LCDInit+0x54>
 124:	00 00       	nop
	_delay_ms(100);
	LCDWriteByte(LCD_IR, 0x0c);
 126:	6c e0       	ldi	r22, 0x0C	; 12
 128:	80 e0       	ldi	r24, 0x00	; 0
 12a:	0e 94 41 00 	call	0x82	; 0x82 <LCDWriteByte>
 12e:	87 ea       	ldi	r24, 0xA7	; 167
 130:	91 e6       	ldi	r25, 0x61	; 97
 132:	01 97       	sbiw	r24, 0x01	; 1
 134:	f1 f7       	brne	.-4      	; 0x132 <LCDInit+0x62>
 136:	00 c0       	rjmp	.+0      	; 0x138 <LCDInit+0x68>
 138:	00 00       	nop
 13a:	08 95       	ret

0000013c <LCDKursorPosihin>:
	_delay_us(40);
}

void LCDKursorPosihin(uint8_t row, uint8_t col)
{
	if(!row) {
 13c:	81 11       	cpse	r24, r1
 13e:	04 c0       	rjmp	.+8      	; 0x148 <LCDKursorPosihin+0xc>
		LCDWriteByte(LCD_IR, (1<<7)|col);
 140:	60 68       	ori	r22, 0x80	; 128
 142:	0e 94 41 00 	call	0x82	; 0x82 <LCDWriteByte>
 146:	08 95       	ret
	}
	else{
		LCDWriteByte(LCD_IR, (3<<6)|col);
 148:	60 6c       	ori	r22, 0xC0	; 192
 14a:	80 e0       	ldi	r24, 0x00	; 0
 14c:	0e 94 41 00 	call	0x82	; 0x82 <LCDWriteByte>
 150:	08 95       	ret

00000152 <main>:
#include "LCD.h"
#define TCN75ADDRES 0x7

int main(void)
{
    LCDInit();
 152:	0e 94 68 00 	call	0xd0	; 0xd0 <LCDInit>
	
    while (1) 
    {
		LCDKursorPosihin(0,0);
 156:	60 e0       	ldi	r22, 0x00	; 0
 158:	70 e0       	ldi	r23, 0x00	; 0
 15a:	80 e0       	ldi	r24, 0x00	; 0
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	0e 94 9e 00 	call	0x13c	; 0x13c <LCDKursorPosihin>
 162:	2f e9       	ldi	r18, 0x9F	; 159
 164:	86 e8       	ldi	r24, 0x86	; 134
 166:	91 e0       	ldi	r25, 0x01	; 1
 168:	21 50       	subi	r18, 0x01	; 1
 16a:	80 40       	sbci	r24, 0x00	; 0
 16c:	90 40       	sbci	r25, 0x00	; 0
 16e:	e1 f7       	brne	.-8      	; 0x168 <main+0x16>
 170:	00 c0       	rjmp	.+0      	; 0x172 <main+0x20>
 172:	00 00       	nop
 174:	f0 cf       	rjmp	.-32     	; 0x156 <main+0x4>

00000176 <_exit>:
 176:	f8 94       	cli

00000178 <__stop_program>:
 178:	ff cf       	rjmp	.-2      	; 0x178 <__stop_program>
