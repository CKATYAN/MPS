
laba3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000164  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001b8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001e8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  00000224  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000abe  00000000  00000000  00000274  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000740  00000000  00000000  00000d32  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003b6  00000000  00000000  00001472  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000068  00000000  00000000  00001828  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000378  00000000  00000000  00001890  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002d2  00000000  00000000  00001c08  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00001eda  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 9e 00 	call	0x13c	; 0x13c <main>
  64:	0c 94 b0 00 	jmp	0x160	; 0x160 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <LCDWriteByte>:
	_delay_ms(100);
}

void LCDWriteByte(_LCDRegister reg, uint8_t data)
{
	LCD_PORT&=LCD_MASK;
  6c:	9b b3       	in	r25, 0x1b	; 27
  6e:	90 7c       	andi	r25, 0xC0	; 192
  70:	9b bb       	out	0x1b, r25	; 27
	
	if(reg)LCD_PORT|=LCD_RS;
  72:	81 11       	cpse	r24, r1
  74:	dc 9a       	sbi	0x1b, 4	; 27
	
	LCD_PORT|=data>>4;
  76:	8b b3       	in	r24, 0x1b	; 27
  78:	96 2f       	mov	r25, r22
  7a:	92 95       	swap	r25
  7c:	9f 70       	andi	r25, 0x0F	; 15
  7e:	89 2b       	or	r24, r25
  80:	8b bb       	out	0x1b, r24	; 27
	LCD_PORT|=LCD_E;
  82:	dd 9a       	sbi	0x1b, 5	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  84:	8d e0       	ldi	r24, 0x0D	; 13
  86:	8a 95       	dec	r24
  88:	f1 f7       	brne	.-4      	; 0x86 <LCDWriteByte+0x1a>
  8a:	00 00       	nop
	_delay_us(40);
	LCD_PORT&=~LCD_E;
  8c:	dd 98       	cbi	0x1b, 5	; 27
  8e:	8d e0       	ldi	r24, 0x0D	; 13
  90:	8a 95       	dec	r24
  92:	f1 f7       	brne	.-4      	; 0x90 <LCDWriteByte+0x24>
  94:	00 00       	nop
	_delay_us(40);
	
	LCD_PORT&=0xf0;
  96:	8b b3       	in	r24, 0x1b	; 27
  98:	80 7f       	andi	r24, 0xF0	; 240
  9a:	8b bb       	out	0x1b, r24	; 27
	
	LCD_PORT|=data&0x0f;
  9c:	8b b3       	in	r24, 0x1b	; 27
  9e:	6f 70       	andi	r22, 0x0F	; 15
  a0:	68 2b       	or	r22, r24
  a2:	6b bb       	out	0x1b, r22	; 27
	LCD_PORT|=LCD_E;
  a4:	dd 9a       	sbi	0x1b, 5	; 27
  a6:	8d e0       	ldi	r24, 0x0D	; 13
  a8:	8a 95       	dec	r24
  aa:	f1 f7       	brne	.-4      	; 0xa8 <LCDWriteByte+0x3c>
  ac:	00 00       	nop
	_delay_us(40);
	LCD_PORT&=~LCD_E;
  ae:	dd 98       	cbi	0x1b, 5	; 27
  b0:	8d e0       	ldi	r24, 0x0D	; 13
  b2:	8a 95       	dec	r24
  b4:	f1 f7       	brne	.-4      	; 0xb2 <LCDWriteByte+0x46>
  b6:	00 00       	nop
  b8:	08 95       	ret

000000ba <LCDInit>:
#define LCD_E (1<<5)
#define LCD_MASK 0xC0

void LCDInit()
{
	DDRA|=~LCD_MASK;
  ba:	8a b3       	in	r24, 0x1a	; 26
  bc:	8f 63       	ori	r24, 0x3F	; 63
  be:	8a bb       	out	0x1a, r24	; 26
	LCDWriteByte(LCD_IR, 0x33);
  c0:	63 e3       	ldi	r22, 0x33	; 51
  c2:	80 e0       	ldi	r24, 0x00	; 0
  c4:	0e 94 36 00 	call	0x6c	; 0x6c <LCDWriteByte>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c8:	87 ea       	ldi	r24, 0xA7	; 167
  ca:	91 e6       	ldi	r25, 0x61	; 97
  cc:	01 97       	sbiw	r24, 0x01	; 1
  ce:	f1 f7       	brne	.-4      	; 0xcc <LCDInit+0x12>
  d0:	00 c0       	rjmp	.+0      	; 0xd2 <LCDInit+0x18>
  d2:	00 00       	nop
	_delay_ms(100);
	LCDWriteByte(LCD_IR, 0x32);
  d4:	62 e3       	ldi	r22, 0x32	; 50
  d6:	80 e0       	ldi	r24, 0x00	; 0
  d8:	0e 94 36 00 	call	0x6c	; 0x6c <LCDWriteByte>
  dc:	87 ea       	ldi	r24, 0xA7	; 167
  de:	91 e6       	ldi	r25, 0x61	; 97
  e0:	01 97       	sbiw	r24, 0x01	; 1
  e2:	f1 f7       	brne	.-4      	; 0xe0 <LCDInit+0x26>
  e4:	00 c0       	rjmp	.+0      	; 0xe6 <LCDInit+0x2c>
  e6:	00 00       	nop
	_delay_ms(100);
	LCDWriteByte(LCD_IR, 0x28);
  e8:	68 e2       	ldi	r22, 0x28	; 40
  ea:	80 e0       	ldi	r24, 0x00	; 0
  ec:	0e 94 36 00 	call	0x6c	; 0x6c <LCDWriteByte>
  f0:	87 ea       	ldi	r24, 0xA7	; 167
  f2:	91 e6       	ldi	r25, 0x61	; 97
  f4:	01 97       	sbiw	r24, 0x01	; 1
  f6:	f1 f7       	brne	.-4      	; 0xf4 <LCDInit+0x3a>
  f8:	00 c0       	rjmp	.+0      	; 0xfa <LCDInit+0x40>
  fa:	00 00       	nop
	_delay_ms(100);
	LCDWriteByte(LCD_IR, 0x01);
  fc:	61 e0       	ldi	r22, 0x01	; 1
  fe:	80 e0       	ldi	r24, 0x00	; 0
 100:	0e 94 36 00 	call	0x6c	; 0x6c <LCDWriteByte>
 104:	87 ea       	ldi	r24, 0xA7	; 167
 106:	91 e6       	ldi	r25, 0x61	; 97
 108:	01 97       	sbiw	r24, 0x01	; 1
 10a:	f1 f7       	brne	.-4      	; 0x108 <LCDInit+0x4e>
 10c:	00 c0       	rjmp	.+0      	; 0x10e <LCDInit+0x54>
 10e:	00 00       	nop
	_delay_ms(100);
	LCDWriteByte(LCD_IR, 0x0c);
 110:	6c e0       	ldi	r22, 0x0C	; 12
 112:	80 e0       	ldi	r24, 0x00	; 0
 114:	0e 94 36 00 	call	0x6c	; 0x6c <LCDWriteByte>
 118:	87 ea       	ldi	r24, 0xA7	; 167
 11a:	91 e6       	ldi	r25, 0x61	; 97
 11c:	01 97       	sbiw	r24, 0x01	; 1
 11e:	f1 f7       	brne	.-4      	; 0x11c <LCDInit+0x62>
 120:	00 c0       	rjmp	.+0      	; 0x122 <LCDInit+0x68>
 122:	00 00       	nop
 124:	08 95       	ret

00000126 <LCDKursorPosihin>:
	_delay_us(40);
}

void LCDKursorPosihin(uint8_t row, uint8_t col)
{
	if(!row) {
 126:	81 11       	cpse	r24, r1
 128:	04 c0       	rjmp	.+8      	; 0x132 <LCDKursorPosihin+0xc>
		LCDWriteByte(LCD_IR, (1<<7)|col);
 12a:	60 68       	ori	r22, 0x80	; 128
 12c:	0e 94 36 00 	call	0x6c	; 0x6c <LCDWriteByte>
 130:	08 95       	ret
	}
	else{
		LCDWriteByte(LCD_IR, (3<<6)|col);
 132:	60 6c       	ori	r22, 0xC0	; 192
 134:	80 e0       	ldi	r24, 0x00	; 0
 136:	0e 94 36 00 	call	0x6c	; 0x6c <LCDWriteByte>
 13a:	08 95       	ret

0000013c <main>:
#include "LCD.h"
#define TCN75ADDRES 0x7

int main(void)
{
    LCDInit();
 13c:	0e 94 5d 00 	call	0xba	; 0xba <LCDInit>
	
    while (1) 
    {
		LCDKursorPosihin(0,0);
 140:	60 e0       	ldi	r22, 0x00	; 0
 142:	70 e0       	ldi	r23, 0x00	; 0
 144:	80 e0       	ldi	r24, 0x00	; 0
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	0e 94 93 00 	call	0x126	; 0x126 <LCDKursorPosihin>
 14c:	2f e9       	ldi	r18, 0x9F	; 159
 14e:	86 e8       	ldi	r24, 0x86	; 134
 150:	91 e0       	ldi	r25, 0x01	; 1
 152:	21 50       	subi	r18, 0x01	; 1
 154:	80 40       	sbci	r24, 0x00	; 0
 156:	90 40       	sbci	r25, 0x00	; 0
 158:	e1 f7       	brne	.-8      	; 0x152 <main+0x16>
 15a:	00 c0       	rjmp	.+0      	; 0x15c <main+0x20>
 15c:	00 00       	nop
 15e:	f0 cf       	rjmp	.-32     	; 0x140 <main+0x4>

00000160 <_exit>:
 160:	f8 94       	cli

00000162 <__stop_program>:
 162:	ff cf       	rjmp	.-2      	; 0x162 <__stop_program>
